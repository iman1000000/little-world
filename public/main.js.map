{"version":3,"sources":["../src/main.js"],"names":["SAVE_VERSION","WIDTH","HEIGHT","MAP_WIDTH","MAP_HEIGHT","TILE_SIZE","UP","RIGHT","DOWN","LEFT","TIMER_INTERVAL","DEBUG","location","host","tile","x","Math","round","gameData","window","gridObjects","targetSprite","InitialState","game","makeImage","load","image","spritesheet","fps","localStorage","getItem","loadSave","newSave","push","y","GridObject","setInterval","Date","now","time","tick","setItem","JSON","stringify","Player","Sprite","currentTime","column","go","methods","saveData","parse","updateSave","tickCatchUp","version","date","Now","grid","type","GameState","body","drag","maxVelocity","touchPad","TouchPad","joycon","facing","joyconAcc","wallClamp","updateFacing","updateTarget","bottom","dy","collide","_","that","solid","updateButtons","target","acceleration","abs","aDown","a","interact","bDown","b","remove","state","gridX","gridY","immovable","init","_type","d","Game","add","start"],"mappings":"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","file":"main.js","sourcesContent":["const SAVE_VERSION = 1;\n\nconst WIDTH = 512;\nconst HEIGHT = 768;\n\nconst MAP_WIDTH = 16;\nconst MAP_HEIGHT = 16;\nconst TILE_SIZE = 32;\n\nconst UP = 0;\nconst RIGHT = 1;\nconst DOWN = 2;\nconst LEFT = 3;\n\n// In milliseconds\nconst TIMER_INTERVAL = 10000;\n\nlet DEBUG = false;\nif (location.host == 'localhost:8080') {\n    DEBUG = true;\n}\n\nfunction tile(x) {\n    return (Math.round(x/TILE_SIZE));\n}\n\nlet gameData = window.gameData = {};\nlet gridObjects = [];\n\nlet targetSprite;\n\nclass InitialState extends GameState {\n    preload() {\n        super.preload();\n\n        window.game.makeImage('placeholder', 'red');\n\n        window.game.load.image('abtn', 'images/button64a.png');\n        window.game.load.image('bbtn', 'images/button64b.png');\n        window.game.load.image('analog', 'images/button128.png');\n        window.game.load.image('target', 'images/target.png');\n        window.game.load.spritesheet('number', 'images/numbers.png', 32, 32);\n        window.game.makeImage('empty', 'rgba(0,0,0,0)');\n        window.game.makeImage('grass', 'green');\n    }\n\n    create() {\n        super.create();\n        this.fps = true;\n\n        // load data if possible\n        if (localStorage.getItem('little-world-data')) {\n            this.loadSave();\n        } else {\n            this.newSave();\n        }\n\n        // create GridObjects\n        for (let x = 0; x < MAP_HEIGHT; x++) {\n            gridObjects.push([]);\n            for (let y = 0; y < MAP_WIDTH; y++) {\n                gridObjects[x].push(new GridObject(x, y));\n            }\n        }\n\n        // begin autosaving and ticking\n        setInterval(() => {\n            // tick\n            if (Date.now() >= gameData.time + TIMER_INTERVAL) {\n                this.tick(Date.now());\n            }\n            // autosave\n            localStorage.setItem('little-world-data', JSON.stringify(gameData));\n        }, 1000);\n\n        new Player();\n        targetSprite = new Sprite(0, 0, 'target');\n    }\n\n    tick(currentTime) {\n        gameData.time = currentTime;\n        for (let column of gridObjects) {\n            for (let go of column) {\n                go.methods.tick(go);\n            }\n        }\n    }\n\n    tickCatchUp() {\n        while(gameData.time < Date.now() - TIMER_INTERVAL) {\n            this.tick(gameData.time + TIMER_INTERVAL);\n        }\n    }\n\n    loadSave() {\n        let saveData = localStorage.getItem('little-world-data');\n        gameData = JSON.parse(saveData);\n        this.updateSave();\n        this.tickCatchUp();\n    }\n\n    updateSave(saveData) {\n        if (!gameData.version) {\n            gameData.version = 0;\n        }\n        // Yes, this is one of the rare cases where switch fallthrough is used\n        switch (gameData.version) {\n            case 0:\n                gameData.time = date.Now();\n        }\n        gameData.version = SAVE_VERSION;\n        return;\n    }\n\n    newSave() {\n        // initialize the grid data\n        gameData.grid = [];\n        for (let x = 0; x < MAP_HEIGHT; x++) {\n            gameData.grid.push([]);\n            for (let y = 0; y < MAP_WIDTH; y++) {\n                gameData.grid[x].push({type: 'empty', x:x, y:y});\n            }\n        }\n\n        gameData.time = Date.now();\n\n        gameData.version = SAVE_VERSION;\n    }\n}\n\nclass Player extends Sprite {\n    constructor() {\n        super(64, 64);\n\n        this.body.drag = 1200;\n        this.body.maxVelocity = 400;\n        this.touchPad = new TouchPad(96, 768-128, 512-96, 768-128, 512 - 2*96, 768 - 128);\n        if (DEBUG) {\n            this.touchPad = joycon;\n        }\n\n        this.facing = UP;\n    }\n\n    update() {\n        // TODO Document TouchPad and deal with textures\n        // TODO make movement Dpad\n        this.joyconAcc(2300, this.touchPad);\n        this.wallClamp();\n\n        this.updateFacing();\n        this.updateTarget();\n\n        // clamp within bounds\n        if (this.bottom > MAP_HEIGHT * TILE_SIZE) {\n            this.bottom = MAP_HEIGHT * TILE_SIZE;\n            if (this.dy > 0) {\n                this.dy = 0;\n            }\n        }\n\n        for (let column of gridObjects) {\n            this.collide(column, (_, that) => {\n                // only collide with solid objects\n                return that.methods.solid;\n            });\n        }\n\n        this.updateButtons();\n    }\n\n    updateTarget() {\n        let x = tile(this.x);\n        let y = tile(this.y);\n        switch (this.facing) {\n            case UP:\n                y = tile(this.y - 1.5 * TILE_SIZE);\n                break;\n            case DOWN:\n                y = tile(this.y + 1.5 * TILE_SIZE);\n                break;\n            case LEFT:\n                x = tile(this.x - 1.5 * TILE_SIZE);\n                break;\n            case RIGHT:\n                x = tile(this.x + 1.5 * TILE_SIZE);\n                break;\n        }\n        this.target = [x, y];\n        targetSprite.x = x * TILE_SIZE;\n        targetSprite.y = y * TILE_SIZE;\n\n        if (y >= MAP_HEIGHT) {\n            targetSprite.y = -TILE_SIZE;\n        }\n    }\n\n    updateFacing() {\n        if (this.body.acceleration.y < 0 && -this.body.acceleration.y > Math.abs(this.body.acceleration.x)) {\n            this.facing = UP;\n        }\n\n        if (this.body.acceleration.y > 0 && this.body.acceleration.y > Math.abs(this.body.acceleration.x)) {\n            this.facing = DOWN;\n        }\n\n        if (this.body.acceleration.x < 0 && -this.body.acceleration.x > Math.abs(this.body.acceleration.y)) {\n            this.facing = LEFT;\n        }\n\n        if (this.body.acceleration.x > 0 && this.body.acceleration.x > Math.abs(this.body.acceleration.y)) {\n            this.facing = RIGHT;\n        }\n    }\n\n    updateButtons() {\n        // TODO put a system for doing this in the library\n\n        // interact when A is just pressed\n        if (!this.aDown && this.touchPad.a) {\n            this.interact();\n        }\n        this.aDown = this.touchPad.a;\n\n        // remove when B is just pressed\n        if (!this.bDown && this.touchPad.b) {\n            this.remove();\n        }\n        this.bDown = this.touchPad.b;\n    }\n\n    interact() {\n        if (this.target[0] < MAP_WIDTH && this.target[1] < MAP_HEIGHT &&\n                this.target[0] >= 0 && this.target[1] >= 0) {\n            let go = gridObjects[this.target[0]][this.target[1]];\n            methods[go.state.type].interact(go);\n        }\n    }\n\n    remove() {\n        if (this.target[0] < MAP_WIDTH && this.target[1] < MAP_HEIGHT &&\n                this.target[0] >= 0 && this.target[1] >= 0) {\n            let go = gridObjects[this.target[0]][this.target[1]];\n            methods[go.state.type].remove(go);\n        }\n    }\n}\n\nclass GridObject extends Sprite {\n    constructor(gridX, gridY) {\n        super(gridX * TILE_SIZE, gridY * TILE_SIZE, 'empty');\n        this.gridX = gridX;\n        this.gridY = gridY;\n\n        this.body.immovable = true;\n\n        this.init();\n        this._type = this.state.type;\n\n        // TODO just pressed wrappers\n        this.aDown = false;\n    }\n\n    get state() {\n        return gameData.grid[this.gridX][this.gridY];\n    }\n\n    set state(d) {\n        gameData.grid[this.gridX][this.gridY] = d;\n    }\n\n    get methods() {\n        return methods[this.state.type];\n    }\n\n    init() {\n        methods[this.state.type].init(this);\n    }\n\n    update() {\n        // re-init when type is changed\n        if (this.state.type != this._type) {\n            this._type = this.state.type;\n            this.init();\n        }\n    }\n}\n\nlet game = new Game(WIDTH, HEIGHT);\ngame.state.add('initial', InitialState);\ngame.state.start('initial');\n"]}