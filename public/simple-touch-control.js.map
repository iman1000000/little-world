{"version":3,"sources":["../src/simple-touch-control.js"],"names":["TouchControl","x","y","radius","key","activeRadius","anchor","setTo","pointers","game","input","i","length","pointer","distance","getLocalPosition","getMagnitude","isDown","relativeX","relativeY","Sprite","TouchPad","analogX","analogY","aX","aY","bX","bY","window","analog","aBtn","bBtn","add","pressed","axisX","axisY","Phaser","Group"],"mappings":"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","file":"simple-touch-control.js","sourcesContent":["class TouchControl extends Sprite {\n    constructor(x, y, radius, key) {\n        super(x, y, key);\n        this.radius = radius;\n        this.activeRadius = radius * 1.5;\n        this.anchor.setTo(0.5, 0.5);\n    }\n\n    get pressed() {\n        let pointers = this.game.input.pointers;\n        for (let i = 0; i < pointers.length; i++) {\n            let pointer = pointers[i];\n            let distance = game.input.getLocalPosition(this, pointer).getMagnitude();\n            if (distance < this.activeRadius && pointer.isDown) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    get axisX() {\n        let pointers = this.game.input.pointers;\n        for (let i = 0; i < pointers.length; i++) {\n            let pointer = pointers[i];\n            let relativeX = game.input.getLocalPosition(this, pointer).x;\n            let distance = game.input.getLocalPosition(this, pointer).getMagnitude();\n            if (distance < this.activeRadius && pointer.isDown) {\n                if (relativeX > this.radius) {\n                    return 1;\n                } else if (relativeX < -this.radius) {\n                    return -1;\n                }\n                return relativeX / this.radius;\n            }\n        }\n        return 0;\n    }\n\n    get axisY() {\n        let pointers = this.game.input.pointers;\n        for (let i = 0; i < pointers.length; i++) {\n            let pointer = pointers[i];\n            let relativeY = game.input.getLocalPosition(this, pointer).y;\n            let distance = game.input.getLocalPosition(this, pointer).getMagnitude();\n            if (distance < this.activeRadius && pointer.isDown) {\n                if (relativeY > this.radius) {\n                    return 1;\n                } else if (relativeY < -this.radius) {\n                    return -1;\n                }\n                return relativeY / this.radius;\n            }\n        }\n        return 0;\n    }\n}\n\nclass TouchPad extends Phaser.Group{\n    constructor(analogX = 86, analogY = 320-86, aX = 500, aY = 320-86, bX = 400, bY = 320-86) {\n        super(window.game);\n        this.analog = new TouchControl(analogX, analogY, 64, 'analog');\n        this.aBtn = new TouchControl(aX, aY, 32, 'abtn');\n        this.bBtn = new TouchControl(bX, bY, 32, 'bbtn');\n\n        this.add(this.analog);\n        this.add(this.aBtn);\n        this.add(this.bBtn);\n    }\n\n    get a() {\n        return this.aBtn.pressed;\n    }\n\n    get b() {\n        return this.bBtn.pressed;\n    }\n\n    get axisX() {\n        return this.analog.axisX;\n    }\n    \n    get axisY() {\n        return this.analog.axisY;\n    }\n}\n"]}